<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%- title %></title>
    <link rel="icon" href="/assets/src/images/logo/autotrics-icon.png">

    <!-- Leaflet CSS & JS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <style>
        html,
        body,
        #map {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        .controls {
            position: absolute;
            top: 12px;
            left: 12px;
            z-index: 1000;
            background: rgba(255, 255, 255, 0.95);
            padding: 8px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            display: flex;
            gap: 8px;
        }

        .controls input {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 14px;
            width: 220px;
        }

        .controls button {
            padding: 8px 12px;
            border: none;
            border-radius: 6px;
            background: #1976d2;
            color: white;
            cursor: pointer;
            font-weight: bold;
        }

        .controls button.locate {
            background: #0b8f52;
        }
    </style>
</head>

<body>
    <div class="controls">
        <input id="searchBox" type="text" placeholder="Search place..." />
        <button id="searchBtn">Search</button>
        <button class="locate" id="locateBtn">Find Mechanics Near Me</button>
    </div>

    <div id="map"></div>

    <script>
        // Initialize map centered on Texas
        const map = L.map("map").setView([31.0, -99.9], 7);

        // Add OpenStreetMap tiles
        L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
            attribution:
                '&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
        }).addTo(map);

        const markersLayer = L.layerGroup().addTo(map);

        // üß≠ Texas bounding box (approx)
        const texasBounds = {
            south: 25.8,
            west: -106.6,
            north: 36.5,
            east: -93.5,
        };

        // Function to get all mechanics in Texas using Overpass API
        async function loadAllTexasMechanics() {
            const query = `
        [out:json][timeout:50];
        (
          node["shop"="car_repair"](${texasBounds.south},${texasBounds.west},${texasBounds.north},${texasBounds.east});
          node["amenity"="car_repair"](${texasBounds.south},${texasBounds.west},${texasBounds.north},${texasBounds.east});
        );
        out center;
      `;

            const url = `https://overpass-api.de/api/interpreter?data=${encodeURIComponent(query)}`;

            const response = await fetch(url);
            const data = await response.json();

            markersLayer.clearLayers();

            if (!data.elements.length) {
                alert("No mechanic workshops found in Texas!");
                return;
            }

            data.elements.forEach((el) => {
                const { lat, lon, tags = {} } = el;
                const name = tags.name || "Unnamed Workshop";
                const popup = `
          <strong>${name}</strong><br/>
          ${tags.amenity || tags.shop || "Car repair"}<br/>
          ${tags.phone ? "‚òéÔ∏è " + tags.phone : ""}
        `;
                L.marker([lat, lon]).addTo(markersLayer).bindPopup(popup);
            });
        }

        // Manual search with Nominatim
        async function searchPlace(query) {
            const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(
                query
            )}&limit=1`;
            const response = await fetch(url);
            const data = await response.json();

            if (!data.length) {
                alert("Place not found!");
                return;
            }

            const place = data[0];
            const lat = parseFloat(place.lat);
            const lon = parseFloat(place.lon);

            map.setView([lat, lon], 14);
            L.marker([lat, lon])
                .addTo(markersLayer)
                .bindPopup(`<strong>${place.display_name}</strong>`)
                .openPopup();
        }

        // Handle search button
        document.getElementById("searchBtn").addEventListener("click", () => {
            const query = document.getElementById("searchBox").value.trim();
            if (!query) return alert("Enter a location to search");
            searchPlace(query);
        });

        // Handle "Find Mechanics Near Me"
        document.getElementById("locateBtn").addEventListener("click", () => {
            if (!navigator.geolocation) {
                alert("Geolocation not supported by your browser.");
                return;
            }

            navigator.geolocation.getCurrentPosition(
                (pos) => {
                    const lat = pos.coords.latitude;
                    const lon = pos.coords.longitude;

                    L.circleMarker([lat, lon], {
                        radius: 8,
                        color: "#1976d2",
                        fillColor: "#1976d2",
                        fillOpacity: 0.8,
                    })
                        .addTo(map)
                        .bindPopup("üìç You are here")
                        .openPopup();

                    map.setView([lat, lon], 14);
                    findMechanicsNearby(lat, lon);
                },
                () => alert("Unable to retrieve your location.")
            );
        });

        // Find mechanics near current location (3 km radius)
        async function findMechanicsNearby(lat, lon, radius = 3000) {
            const query = `
        [out:json];
        (
          node["shop"="car_repair"](around:${radius},${lat},${lon});
          node["amenity"="car_repair"](around:${radius},${lat},${lon});
        );
        out center;
      `;
            const url = `https://overpass-api.de/api/interpreter?data=${encodeURIComponent(query)}`;
            const response = await fetch(url);
            const data = await response.json();

            markersLayer.clearLayers();

            if (!data.elements.length) {
                alert("No mechanic workshops found nearby!");
                return;
            }

            data.elements.forEach((el) => {
                const { lat, lon, tags = {} } = el;
                const name = tags.name || "Unnamed Workshop";
                const popup = `
          <strong>${name}</strong><br/>
          ${tags.amenity || tags.shop || "Car repair"}
        `;
                L.marker([lat, lon]).addTo(markersLayer).bindPopup(popup);
            });
        }

        // üî• Auto-load all Texas mechanics when the page opens
        loadAllTexasMechanics();
    </script>
</body>

</html>